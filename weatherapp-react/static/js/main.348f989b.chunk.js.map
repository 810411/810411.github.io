{"version":3,"sources":["components/Context.js","components/CityAutoComplete.js","components/WithData.js","utils/slugify.js","components/Error.js","components/CityCard.js","components/CitiesListView.js","components/CityDetailView.js","App.js","serviceWorker.js","index.js"],"names":["SetCityContext","React","createContext","Option","AutoComplete","options","arr","map","city","react_default","a","createElement","key","value","join","label","topCities","topCity","cities","find","withRouter","_ref","history","setCity","useContext","_useState","useState","_useState2","Object","slicedToArray","dataSource","setDataSource","style","width","auto_complete","disabled","location","pathname","allowClear","autoFocus","onSearch","length","filter","slice","toLowerCase","optionLabelProp","onSelect","split","input","prefix","icon","type","placeholder","withData","Wrapped","_Component","_temp","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","data","error","inherits","createClass","update","prevProps","props","_this2","_this$props","fiveDays","parseFloat","urlParams","url","fetch","then","res","ok","json","Error","status","setState","catch","err","console","_this$state","assign","get","name","displayName","Component","slugify","s","String","char_map","а","б","в","г","д","е","ё","ж","з","и","й","к","л","м","н","о","п","р","с","т","у","ф","х","ц","ч","ш","щ","ъ","ы","ь","э","ю","i","replace","RegExp","result","height","title","subTitle","deleteCity","card","components_Error","react","Meta","avatar","shape","size","src","weather","row","justify","react_router_dom","to","onClick","theme","description","Math","floor","main","temp","pressure","humidity","wind","speed","spin","tip","margin","storageItemName","getFromStorage","JSON","parse","localStorage","getItem","CitiesList","col","components_CityCard","CitiesListView","_ref2","setCities","useEffect","item","citiesForStorage","push","setItem","stringify","CitiesListView_CitiesList","index","findIndex","splice","cleanedData","list","dt_txt","_ref3","date","table","columns","dataIndex","align","loading","pagination","Header","Layout","Footer","Content","App","Provider","basename","layout","backgroundColor","span","offset","components_CityAutoComplete","background","react_router","path","exact","render","components_CitiesListView","components_CityDetailView","Date","toLocaleDateString","Boolean","window","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.348f989b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SetCityContext = React.createContext();\r\n\r\nexport {\r\n  SetCityContext\r\n};\r\n","import React, {useState, useContext} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport cities from '../utils/cities';\r\nimport {Icon, Input, AutoComplete} from 'antd';\r\nimport {SetCityContext} from './Context';\r\n\r\n\r\nconst {Option} = AutoComplete;\r\nconst options = arr => arr.map(city =>\r\n  (<Option key={city[0] + city[2]} value={city.join('|')} label={city[0]}>{city[0]} ({city[1]})</Option>));\r\n\r\nconst topCities = [\"Москва\", \"Санкт-Петербург\", \"Екатеринбург\", \"Владивосток\", \"Сочи\", \"Новосибирск\", \"Казань\", \"Уфа\",\r\n  \"Хабаровск\", \"Красноярск\"]\r\n  .map(topCity => cities.find(city => city[0] === topCity));\r\n\r\nconst CityAutoComplete = ({history}) => {\r\n  const setCity = useContext(SetCityContext);\r\n  const [dataSource, setDataSource] = useState(options(topCities));\r\n\r\n  const handleSearch = value => {\r\n    if (value.length > 0) {\r\n      const arr = cities.filter(city =>\r\n        city[0].slice(0, value.length).toLowerCase() === value.toLowerCase());\r\n      setDataSource(options(arr));\r\n    } else {\r\n      setDataSource(options(topCities))\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{width: 300}}>\r\n      <AutoComplete\r\n        disabled={history.location.pathname !== '/'}\r\n        allowClear\r\n        autoFocus\r\n        style={{width: '100%'}}\r\n        dataSource={dataSource}\r\n        onSearch={handleSearch}\r\n        optionLabelProp=\"label\"\r\n        onSelect={value => setCity(value.split('|'))}\r\n      >\r\n        <Input\r\n          prefix={<Icon type=\"search\"/>}\r\n          placeholder=\"Поиск и выбор города\"\r\n        />\r\n      </AutoComplete>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(CityAutoComplete);\r\n","import React, {Component} from 'react';\r\n\r\nconst withData = Wrapped => {\r\n  return class extends Component {\r\n    static get displayName() {\r\n      const name = Wrapped.displayName ||\r\n        Wrapped.name || 'Component';\r\n      return `WithDate(${name})`;\r\n    }\r\n\r\n    state = {\r\n      data: null,\r\n      error: false\r\n    };\r\n\r\n    componentDidMount() {\r\n      this.update();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if (this.props.city !== prevProps.city) {\r\n        this.update();\r\n      }\r\n    }\r\n\r\n    update() {\r\n      const {city, fiveDays} = this.props;\r\n\r\n      if (city.length === 4 && parseFloat(city[2]) && parseFloat(city[3])) {\r\n        const urlParams = 'mode=json&units=metric&lang=ru&appid=e3fb0b77258f9a1408fdc64e00ae3f93';\r\n        const url = fiveDays ?\r\n          `https://api.openweathermap.org/data/2.5/forecast?lat=${city[2]}&lon=${city[3]}&${urlParams}` :\r\n          `https://api.openweathermap.org/data/2.5/weather?lat=${city[2]}&lon=${city[3]}&${urlParams}`;\r\n\r\n        fetch(url)\r\n          .then(res => {\r\n            if (res.ok) {\r\n              return res.json()\r\n            } else {\r\n              throw new Error(res.status)\r\n            }\r\n          })\r\n          .then(data => {\r\n            this.setState({\r\n              data: data,\r\n              error: false\r\n            });\r\n          })\r\n          .catch(err => {\r\n            console.error(err);\r\n            this.setState({\r\n              error: true\r\n            });\r\n          });\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const {data, error} = this.state;\r\n\r\n      return (\r\n        <Wrapped {...this.props} data={data} error={error}/>\r\n      )\r\n    }\r\n  }\r\n};\r\n\r\nexport default withData\r\n","export default function (s) {\r\n  s = String(s).toLowerCase();\r\n\r\n  const char_map = {\r\n    'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo', 'ж': 'zh',\r\n    'з': 'z', 'и': 'i', 'й': 'j', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o',\r\n    'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c',\r\n    'ч': 'ch', 'ш': 'sh', 'щ': 'sh', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu'\r\n  };\r\n\r\n  for (let i in char_map) {\r\n    s = s.replace(RegExp(i, 'g'), char_map[i]);\r\n  }\r\n\r\n  return s;\r\n}\r\n","import React from 'react';\r\nimport {Result} from 'antd';\r\n\r\n\r\nconst Error = () => {\r\n  return (\r\n    <Result\r\n      style={{height: '217px'}}\r\n      status=\"error\"\r\n      title=\"Сломалось\"\r\n      subTitle=\"Что-то пошло не так и исправят видимо когда-нибудь\"\r\n    />\r\n  )\r\n};\r\n\r\nexport default Error\r\n","import React, {Fragment, useContext} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Row, Card, Avatar, Spin, Icon} from 'antd';\r\nimport {SetCityContext} from './Context';\r\nimport withData from './WithData'\r\nimport slugify from '../utils/slugify'\r\nimport Error from \"./Error\";\r\n\r\n\r\nconst CityCard = ({city, data, error, deleteCity}) => {\r\n  const setCity = useContext(SetCityContext);\r\n\r\n  return (\r\n    <Card style={{width: 320}}>\r\n      {\r\n        error ?\r\n          (<Error/>) :\r\n          data ?\r\n            (<Fragment>\r\n              <Card.Meta\r\n                avatar={\r\n                  <Avatar shape=\"square\" size={64}\r\n                          src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}/>\r\n                }\r\n                title={\r\n                  <Row type=\"flex\" justify=\"space-between\">\r\n                    <Link\r\n                      to={`/${slugify(city[0])}`}\r\n                      onClick={() => setCity(city)}\r\n                    >{city[0].slice(0, 18)}{city[0].length > 17 && '..'}</Link>\r\n                    <Icon\r\n                      type=\"close-circle\" theme=\"twoTone\"\r\n                      onClick={() => deleteCity(city)}\r\n                    />\r\n                  </Row>\r\n                }\r\n                description={city[1]}\r\n              />\r\n              <br/>\r\n              <p>Температура: {Math.floor(data.main.temp)} °С</p>\r\n              <p>Атм. давление: {Math.floor(data.main.pressure * 0.75)} мм рт.ст.</p>\r\n              <p>Влажность: {data.main.humidity} %</p>\r\n              <p>Ветер: {Math.floor(data.wind.speed)} м/с</p>\r\n            </Fragment>) :\r\n            (<Spin tip=\"Вгружаю...\" style={{margin: \"86px 100px\"}}/>)\r\n      }\r\n    </Card>\r\n  )\r\n};\r\n\r\nexport default withData(CityCard)\r\n","import React, {useState, useEffect, useContext} from 'react';\r\nimport {Col, Row} from \"antd\";\r\nimport {SetCityContext} from './Context';\r\nimport CityCard from \"./CityCard\";\r\n\r\n\r\nconst storageItemName = 'pogo-da-cities';\r\n\r\nfunction getFromStorage() {\r\n  const cities = JSON.parse(localStorage.getItem(storageItemName)) || [];\r\n  return cities.length ? cities : [[\"Москва\", \"Москва\", \"55.753215\", \"37.622504\"],]\r\n}\r\n\r\nconst CitiesList = ({cities, deleteCity}) => {\r\n  return (\r\n    <Row type=\"flex\">\r\n      {cities.map(city =>\r\n        (<Col key={city[0] + city[2]}>\r\n          <CityCard city={city} deleteCity={deleteCity}/>\r\n        </Col>)\r\n      )}\r\n    </Row>\r\n  )\r\n};\r\n\r\nconst CitiesListView = ({city}) => {\r\n  const setCity = useContext(SetCityContext);\r\n  const [cities, setCities] = useState(getFromStorage());\r\n\r\n  const deleteCity = city => {\r\n    const cities = getFromStorage();\r\n    const index = cities.findIndex(item => item[0] === city[0] && item[1] === city[1]);\r\n    if (index > -1) {\r\n      cities.splice(index, 1);\r\n      localStorage.setItem(storageItemName, JSON.stringify(cities));\r\n      setCities(getFromStorage());\r\n      setCity([])\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (city.length && !cities.find(item => item[0] === city[0] && item[1] === city[1])) {\r\n      const citiesForStorage = cities;\r\n      citiesForStorage.push(city);\r\n      localStorage.setItem(storageItemName, JSON.stringify(citiesForStorage));\r\n      setCities(getFromStorage());\r\n    }\r\n  }, [city, cities]);\r\n\r\n  return (\r\n    <CitiesList cities={cities} deleteCity={deleteCity}/>\r\n  )\r\n\r\n};\r\n\r\nexport default CitiesListView;\r\n","import React, {Fragment, useEffect} from 'react';\r\nimport {Table, Row, Col} from 'antd';\r\nimport withData from './WithData'\r\nimport Error from './Error';\r\n\r\n\r\nconst CityDetailView = ({city, data, error, history}) => {\r\n  const columns = [\r\n    {\r\n      title: 'Дата',\r\n      dataIndex: 'date',\r\n      key: 'date',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: 'Температура,°С',\r\n      dataIndex: 'temp',\r\n      key: 'temp',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: 'Атм.давл.,мм рт.ст.',\r\n      dataIndex: 'pressure',\r\n      key: 'pressure',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: 'Влажность,%',\r\n      dataIndex: 'humidity',\r\n      key: 'humidity',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: 'Ветер,м/с',\r\n      dataIndex: 'wind',\r\n      key: 'wind',\r\n      align: 'center'\r\n    }\r\n  ];\r\n\r\n  const cleanedData = (data && 'list' in data) && data.list\r\n    .filter(({dt_txt}) => dt_txt.split(' ')[1] === '12:00:00')\r\n    .map(({dt_txt, main, wind}) =>\r\n      ({\r\n        key: dt_txt, date: dt_txt.split(' ')[0], temp: Math.floor(main.temp),\r\n        pressure: Math.floor(main.pressure * 0.75), humidity: main.humidity, wind: Math.floor(wind.speed)\r\n      }));\r\n\r\n  useEffect(() => {\r\n    if (!city.length) {\r\n      history.push('/');\r\n    }\r\n  }, [city, history]);\r\n\r\n  return error ?\r\n    (<Error/>) :\r\n    (<Fragment>\r\n      <Row type=\"flex\" justify=\"center\">\r\n        <Col><h1>{city[0]}</h1></Col>\r\n      </Row>\r\n      <Table size=\"middle\" columns={columns} dataSource={cleanedData} loading={!data} pagination={false}/>\r\n    </Fragment>)\r\n};\r\n\r\nexport default withData(CityDetailView)\r\n","import React, {useState} from 'react';\nimport {BrowserRouter, Route, Switch, Link} from 'react-router-dom';\nimport {Layout, Row, Col} from 'antd';\nimport {SetCityContext} from './components/Context'\nimport CityAutoComplete from './components/CityAutoComplete';\nimport CitiesListView from './components/CitiesListView';\nimport CityDetailView from './components/CityDetailView';\n\n\nconst {Header, Footer, Content} = Layout;\n\nconst App = () => {\n  const [city, setCity] = useState([]);\n\n  return (\n    <SetCityContext.Provider value={setCity}>\n      <BrowserRouter basename=\"/weatherapp-react\">\n        <Layout>\n          <Header style={{backgroundColor: \"lightgrey\"}}>\n            <Row>\n              <Col span={1} offset={0}>\n                <h1><Link to=\"/\">ПогоДа</Link></h1>\n              </Col>\n              <Col span={8} offset={8}>\n                <CityAutoComplete/>\n              </Col>\n            </Row>\n          </Header>\n          <Content style={{background: '#fff'}}>\n            <Switch>\n              <Route path=\"/\" exact render={(props) => <CitiesListView city={city} {...props} />}/>\n              <Route path=\"/:id?\" render={(props) => <CityDetailView city={city} fiveDays {...props} />}/>\n            </Switch>\n          </Content>\n          <Footer>\n            <Row type=\"flex\" justify=\"end\">\n              <Col>{(new Date()).toLocaleDateString()}</Col>\n            </Row>\n          </Footer>\n        </Layout>\n      </BrowserRouter>\n    </SetCityContext.Provider>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}